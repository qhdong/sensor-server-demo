#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sensor-server:server');
var http = require('http');
var uuid = require('uuid');
var MongoClient = require('mongodb').MongoClient;
var assert = require('assert');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io server
 */
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Test Connect to database
 */
var url = 'mongodb://localhost:27017/sensor';
MongoClient.connect(url, function (err, db) {
  assert.equal(null, err);
  console.log('Connected successfully to server');
  db.close();
});

/**
 * Wait for connection
 */

io.on('connection', function (socket) {
  socket.emit('uuid', {uuid: uuid.v1()});

  socket.on('motion', function (motion) {
    console.log('uuid: %s - x: %d, y: %d, z: %d',
      motion.uuid,
      motion.x,
      motion.y,
      motion.z
    );
    MongoClient.connect(url, function (err, db) {
      if (err) console.error(err);
      var collection = db.collection('motion');
      collection.insertMany([
        {
          uuid: motion.uuid,
          time: new Date().getTime(),
          x: motion.x,
          y: motion.y,
          z: motion.z
        }
      ], function (err, result) {
        if (err) console.error(err);
        db.close();
      });
    });
  });

  socket.on('orientation', function (orientation) {
    console.log('uuid: %s - alpha: %d, beta: %d, gamma: %d',
      orientation.uuid,
      orientation.alpha,
      orientation.beta,
      orientation.gamma
    );
    MongoClient.connect(url, function (err, db) {
      if (err) console.error(err);
      var collection = db.collection('orientation');
      collection.insertMany([
        {
          uuid: orientation.uuid,
          time: new Date().getTime(),
          alpha: orientation.alpha,
          beta: orientation.beta,
          gamma: orientation.gamma
        }
      ], function (err, result) {
        if (err) console.error(err);
        db.close();
      });
    });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
